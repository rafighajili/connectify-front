import type { Config } from "tailwindcss";

const config: Config = {
  content: ["./src/**/*.{js,ts,jsx,tsx,mdx}"],
  darkMode: "class",
  theme: {
    container: {
      padding: { DEFAULT: "1rem" },
      screens: { sm: "640px", md: "768px", lg: "1024px", xl: "1280px" },
      center: true,
    },

    extend: {
      colors: {
        default: {
          0: "rgb(var(--color-default-0) / <alpha-value>)",
          50: "rgb(var(--color-default-50) / <alpha-value>)",
          100: "rgb(var(--color-default-100) / <alpha-value>)",
          200: "rgb(var(--color-default-200) / <alpha-value>)",
          300: "rgb(var(--color-default-300) / <alpha-value>)",
          400: "rgb(var(--color-default-400) / <alpha-value>)",
          500: "rgb(var(--color-default-500) / <alpha-value>)",
          600: "rgb(var(--color-default-600) / <alpha-value>)",
          700: "rgb(var(--color-default-700) / <alpha-value>)",
          800: "rgb(var(--color-default-800) / <alpha-value>)",
          900: "rgb(var(--color-default-900) / <alpha-value>)",
          950: "rgb(var(--color-default-950) / <alpha-value>)",
          1000: "rgb(var(--color-default-1000) / <alpha-value>)",
        },
        primary: {
          50: "rgb(var(--color-primary-50) / <alpha-value>)",
          100: "rgb(var(--color-primary-100) / <alpha-value>)",
          200: "rgb(var(--color-primary-200) / <alpha-value>)",
          300: "rgb(var(--color-primary-300) / <alpha-value>)",
          400: "rgb(var(--color-primary-400) / <alpha-value>)",
          500: "rgb(var(--color-primary-500) / <alpha-value>)",
          600: "rgb(var(--color-primary-600) / <alpha-value>)",
          700: "rgb(var(--color-primary-700) / <alpha-value>)",
          800: "rgb(var(--color-primary-800) / <alpha-value>)",
          900: "rgb(var(--color-primary-900) / <alpha-value>)",
          950: "rgb(var(--color-primary-950) / <alpha-value>)",
        },
        secondary: {
          50: "rgb(var(--color-secondary-50) / <alpha-value>)",
          100: "rgb(var(--color-secondary-100) / <alpha-value>)",
          200: "rgb(var(--color-secondary-200) / <alpha-value>)",
          300: "rgb(var(--color-secondary-300) / <alpha-value>)",
          400: "rgb(var(--color-secondary-400) / <alpha-value>)",
          500: "rgb(var(--color-secondary-500) / <alpha-value>)",
          600: "rgb(var(--color-secondary-600) / <alpha-value>)",
          700: "rgb(var(--color-secondary-700) / <alpha-value>)",
          800: "rgb(var(--color-secondary-800) / <alpha-value>)",
          900: "rgb(var(--color-secondary-900) / <alpha-value>)",
          950: "rgb(var(--color-secondary-950) / <alpha-value>)",
        },
        info: {
          50: "rgb(var(--color-added-50) / <alpha-value>)",
          100: "rgb(var(--color-added-100) / <alpha-value>)",
          200: "rgb(var(--color-added-200) / <alpha-value>)",
          300: "rgb(var(--color-added-300) / <alpha-value>)",
          400: "rgb(var(--color-added-400) / <alpha-value>)",
          500: "rgb(var(--color-added-500) / <alpha-value>)",
          600: "rgb(var(--color-added-600) / <alpha-value>)",
          700: "rgb(var(--color-added-700) / <alpha-value>)",
          800: "rgb(var(--color-added-800) / <alpha-value>)",
          900: "rgb(var(--color-added-900) / <alpha-value>)",
          950: "rgb(var(--color-added-950) / <alpha-value>)",
        },
        success: {
          50: "rgb(var(--color-success-50) / <alpha-value>)",
          100: "rgb(var(--color-success-100) / <alpha-value>)",
          200: "rgb(var(--color-success-200) / <alpha-value>)",
          300: "rgb(var(--color-success-300) / <alpha-value>)",
          400: "rgb(var(--color-success-400) / <alpha-value>)",
          500: "rgb(var(--color-success-500) / <alpha-value>)",
          600: "rgb(var(--color-success-600) / <alpha-value>)",
          700: "rgb(var(--color-success-700) / <alpha-value>)",
          800: "rgb(var(--color-success-800) / <alpha-value>)",
          900: "rgb(var(--color-success-900) / <alpha-value>)",
          950: "rgb(var(--color-success-950) / <alpha-value>)",
        },
        warning: {
          50: "rgb(var(--color-warning-50) / <alpha-value>)",
          100: "rgb(var(--color-warning-100) / <alpha-value>)",
          200: "rgb(var(--color-warning-200) / <alpha-value>)",
          300: "rgb(var(--color-warning-300) / <alpha-value>)",
          400: "rgb(var(--color-warning-400) / <alpha-value>)",
          500: "rgb(var(--color-warning-500) / <alpha-value>)",
          600: "rgb(var(--color-warning-600) / <alpha-value>)",
          700: "rgb(var(--color-warning-700) / <alpha-value>)",
          800: "rgb(var(--color-warning-800) / <alpha-value>)",
          900: "rgb(var(--color-warning-900) / <alpha-value>)",
          950: "rgb(var(--color-warning-950) / <alpha-value>)",
        },
        danger: {
          50: "rgb(var(--color-danger-50) / <alpha-value>)",
          100: "rgb(var(--color-danger-100) / <alpha-value>)",
          200: "rgb(var(--color-danger-200) / <alpha-value>)",
          300: "rgb(var(--color-danger-300) / <alpha-value>)",
          400: "rgb(var(--color-danger-400) / <alpha-value>)",
          500: "rgb(var(--color-danger-500) / <alpha-value>)",
          600: "rgb(var(--color-danger-600) / <alpha-value>)",
          700: "rgb(var(--color-danger-700) / <alpha-value>)",
          800: "rgb(var(--color-danger-800) / <alpha-value>)",
          900: "rgb(var(--color-danger-900) / <alpha-value>)",
          950: "rgb(var(--color-danger-950) / <alpha-value>)",
        },
      },
    },
  },
  plugins: [require("@tailwindcss/line-clamp")],
};
export default config;
